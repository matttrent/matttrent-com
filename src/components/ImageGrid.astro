---
import { Image } from "astro:assets";
import BaseFigure from "@components/BaseFigure.astro";

interface Props {
  columns: number;
  layout?: "normal" | "full" | "fullscreen";
  aspectRatio?: string | number;
  images: {
    src: ImageMetadata;
    alt: string;
    xoff?: number;
    yoff?: number;
  }[];
}

const { columns = 3, layout = "normal", aspectRatio, images } = Astro.props;
const cssAspectRatio = aspectRatio?.toString().replace("/", " / ");

// Helper to clamp and compute position
const computePosition = (xoff = 0, yoff = 0) => {
  const x = 50 - Math.max(-50, Math.min(50, xoff));
  const y = 50 - Math.max(-50, Math.min(50, yoff));
  return `${x}% ${y}%`;
};

// Define widths based on layout type
const getImageSizes = (src: ImageMetadata, layoutWidth: typeof layout) => {
  switch (layoutWidth) {
    case "normal":
      return "(max-width: 500px) 500px, (max-width: 800px) 800px, 800px";
    case "full":
      return "(max-width: 500px) 500px, (max-width: 800px) 800px, 1220px";
    case "fullscreen":
      return `(max-width: 500px) 500px, (max-width: 800px) 800px, (max-width: 1400px) 1600px, ${src.width}px`;
    default:
      return "800px";
  }
};

// Define widths for image optimization
const getImageWidths = (src: ImageMetadata, layoutWidth: typeof layout) => {
  switch (layoutWidth) {
    case "normal":
      return [500, 800];
    case "full":
      return [500, 800, 1220];
    case "fullscreen":
      return [500, 800, 1600, src.width];
    default:
      return [800];
  }
};
---

<BaseFigure layout={layout} className="ImageGrid">
  <div class="ImageGrid-grid">
    {
      images.map(({ src, alt, xoff, yoff }) => (
        <Image
          src={src}
          alt={alt}
          style={{ objectPosition: computePosition(xoff, yoff) }}
          sizes={getImageSizes(src, layout)}
          widths={getImageWidths(src, layout)}
        />
      ))
    }
  </div>
  {layout === "normal" && <slot name="sidenote" />}
  <slot name="figcaption" />
</BaseFigure>

<style define:vars={{ columns, cssAspectRatio }}>
  /* Root variables */
  :root {
    --image-grid-gap: 0.5rem;
  }

  /* Grid container */
  .ImageGrid-grid {
    display: grid;
    grid-template-columns: repeat(var(--columns), 1fr);
    gap: var(--image-grid-gap);
    width: 100%;
    float: left;
  }

  /* Image styles */
  :global(.ImageGrid-grid > img),
  :global(.ImageGrid-grid > :is(astro-island, *) > img) {
    width: 100%;
    height: 100%;
    object-fit: cover;
    aspect-ratio: var(--cssAspectRatio, auto);
  }
</style>
