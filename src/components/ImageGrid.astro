---
import { Image } from "astro:assets";

interface Props {
  columns: number;
  width?: "normal" | "full" | "fullscreen";
  aspectRatio?: string | number;
  images: {
    src: ImageMetadata;
    alt: string;
    xoff?: number;
    yoff?: number;
  }[];
}

const { columns = 3, width = "normal", aspectRatio, images } = Astro.props;
const cssAspectRatio = aspectRatio?.toString().replace("/", " / ");

// Helper to clamp and compute position
const computePosition = (xoff = 0, yoff = 0) => {
  const x = 50 - Math.max(-50, Math.min(50, xoff));
  const y = 50 - Math.max(-50, Math.min(50, yoff));
  return `${x}% ${y}%`;
};

// Define widths based on layout type
const getImageSizes = (src: ImageMetadata, layoutWidth: typeof width) => {
  switch (layoutWidth) {
    case "normal":
      return "(max-width: 500px) 500px, (max-width: 800px) 800px, 800px";
    case "full":
      return "(max-width: 500px) 500px, (max-width: 800px) 800px, 1220px";
    case "fullscreen":
      return `(max-width: 500px) 500px, (max-width: 800px) 800px, (max-width: 1400px) 1600px, ${src.width}px`;
    default:
      return "800px";
  }
};

// Define widths for image optimization
const getImageWidths = (src: ImageMetadata, layoutWidth: typeof width) => {
  switch (layoutWidth) {
    case "normal":
      return [500, 800];
    case "full":
      return [500, 800, 1220];
    case "fullscreen":
      return [500, 800, 1600, src.width];
    default:
      return [800];
  }
};
---

<figure class:list={[`width-${width}`, "ImageGrid"]}>
  <div class="ImageGrid-grid">
    {
      images.map(({ src, alt, xoff, yoff }) => (
        <Image
          src={src}
          alt={alt}
          style={{ objectPosition: computePosition(xoff, yoff) }}
          sizes={getImageSizes(src, width)}
          widths={getImageWidths(src, width)}
        />
      ))
    }
  </div>
  {width === "normal" && <slot name="sidenote" />}
  <slot name="figcaption" />
</figure>

<style define:vars={{ columns, cssAspectRatio }}>
  :root {
    --image-grid-gap: 0.5rem;
  }

  figure {
    padding: 0;
    border: 0;
    font-size: 100%;
    font: inherit;
    vertical-align: baseline;
    -webkit-margin-start: 0;
    -webkit-margin-end: 0;
    margin: 1.6em 0 3em 0;
  }

  figure.width-normal {
    grid-column: text-start / text-end;
  }

  figure.width-full {
    grid-column: text-start / margin-end;
  }

  figure.width-fullscreen {
    grid-column: screen-start / screen-end;
    margin-top: 6em;
    margin-bottom: 9em;
  }

  @media (max-width: 760px) {
    figure.width-normal,
    figure.width-full,
    figure.width-fullscreen {
      grid-column: page-start / page-end;
    }
  }

  :global(article > figure.ImageGrid > figcaption) {
    float: right;
    clear: right;
    margin-top: 0;
    margin-bottom: 0;
    font-size: 1.1rem;
    line-height: 1.6;
    vertical-align: baseline;
    position: relative;
    max-width: calc(4 * var(--column-width));
  }

  :global(article > figure.ImageGrid.width-fullscreen > figcaption) {
    margin-top: 1em;
    margin-right: 4em;
  }

  .ImageGrid-grid {
    display: grid;
    grid-template-columns: repeat(var(--columns), 1fr);
    gap: var(--image-grid-gap);
    width: 100%;
    float: left;
  }

  /* Style direct image children */
  :global(.ImageGrid-grid > img),
  :global(.ImageGrid-grid > :is(astro-island, *) > img) {
    width: 100%;
    height: 100%;
    object-fit: cover;
    aspect-ratio: var(--cssAspectRatio, auto);
  }
</style>
